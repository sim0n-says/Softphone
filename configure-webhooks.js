#!/usr/bin/env node

/**
 * Script de configuration manuelle des webhooks Twilio
 * Usage: node configure-webhooks.js [ngrok-url]
 */

const twilio = require('twilio');
require('dotenv').config();

// Configuration Twilio
const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const phoneNumber = process.env.TWILIO_PHONE_NUMBER;

if (!accountSid || !authToken || !phoneNumber) {
    console.error('‚ùå Variables d\'environnement Twilio manquantes');
    console.log('V√©rifiez votre fichier .env');
    process.exit(1);
}

const client = twilio(accountSid, authToken);

async function configureWebhooks(ngrokUrl) {
    console.log('üîß Configuration des webhooks Twilio');
    console.log('===================================');
    console.log('üìû Num√©ro:', phoneNumber);
    console.log('üåç URL NGROK:', ngrokUrl);
    console.log('');
    
    try {
        // 1. Trouver le num√©ro de t√©l√©phone
        console.log('üîç Recherche du num√©ro de t√©l√©phone...');
        const incomingPhoneNumbers = await client.incomingPhoneNumbers.list({
            phoneNumber: phoneNumber
        });
        
        if (incomingPhoneNumbers.length === 0) {
            console.error('‚ùå Num√©ro de t√©l√©phone non trouv√©:', phoneNumber);
            return;
        }
        
        const phoneNumberSid = incomingPhoneNumbers[0].sid;
        console.log('‚úÖ Num√©ro trouv√©, SID:', phoneNumberSid);
        
        // 2. Configurer les webhooks
        console.log('\nüîó Configuration des webhooks...');
        
        const webhookConfig = {
            voiceUrl: `${ngrokUrl}/handle_calls`,
            voiceMethod: 'POST',
            smsUrl: `${ngrokUrl}/handle_sms`,
            smsMethod: 'POST',
            mmsUrl: `${ngrokUrl}/handle_mms`,
            mmsMethod: 'POST',
            statusCallbackUrl: `${ngrokUrl}/message-status`,
            statusCallbackMethod: 'POST'
        };
        
        console.log('üìû Webhook Appels:', webhookConfig.voiceUrl);
        console.log('üì± Webhook SMS:', webhookConfig.smsUrl);
        console.log('üì∑ Webhook MMS:', webhookConfig.mmsUrl);
        console.log('üìä Webhook Statut:', webhookConfig.statusCallbackUrl);
        
        // Mettre √† jour le num√©ro
        const updatedNumber = await client.incomingPhoneNumbers(phoneNumberSid)
            .update(webhookConfig);
        
        console.log('\n‚úÖ Configuration termin√©e !');
        console.log('üìû Num√©ro mis √† jour:', updatedNumber.phoneNumber);
        
        // 3. V√©rifier la configuration
        console.log('\nüîç V√©rification de la configuration...');
        const phoneDetails = await client.incomingPhoneNumbers(phoneNumberSid).fetch();
        
        console.log('üì± SMS URL:', phoneDetails.smsUrl);
        console.log('üì∑ MMS URL:', phoneDetails.mmsUrl);
        console.log('üìä Status Callback URL:', phoneDetails.statusCallbackUrl);
        console.log('üìû Voice URL:', phoneDetails.voiceUrl);
        
        // 4. Tester les webhooks
        console.log('\nüß™ Test des webhooks...');
        
        // Test SMS webhook
        try {
            const smsTest = await fetch(`${ngrokUrl}/handle_sms`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams({
                    To: phoneNumber,
                    From: '+1234567890',
                    Body: 'Test webhook SMS',
                    MessageSid: `test_${Date.now()}`
                })
            });
            
            if (smsTest.ok) {
                console.log('‚úÖ Webhook SMS fonctionnel');
            } else {
                console.log('‚ö†Ô∏è  Webhook SMS non accessible');
            }
        } catch (error) {
            console.log('‚ùå Erreur test webhook SMS:', error.message);
        }
        
        // Test MMS webhook
        try {
            const mmsTest = await fetch(`${ngrokUrl}/handle_mms`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams({
                    To: phoneNumber,
                    From: '+1234567890',
                    Body: 'Test webhook MMS',
                    MessageSid: `test_${Date.now()}`,
                    NumMedia: '0'
                })
            });
            
            if (mmsTest.ok) {
                console.log('‚úÖ Webhook MMS fonctionnel');
            } else {
                console.log('‚ö†Ô∏è  Webhook MMS non accessible');
            }
        } catch (error) {
            console.log('‚ùå Erreur test webhook MMS:', error.message);
        }
        
        console.log('\nüéâ Configuration des webhooks termin√©e !');
        console.log('========================================');
        console.log('‚úÖ Webhooks configur√©s');
        console.log('‚úÖ Tests effectu√©s');
        console.log('‚úÖ Pr√™t pour les messages entrants/sortants');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la configuration:', error.message);
        if (error.code) {
            console.error('   Code d\'erreur:', error.code);
        }
        if (error.moreInfo) {
            console.error('   Plus d\'infos:', error.moreInfo);
        }
    }
}

// R√©cup√©rer l'URL NGROK depuis les arguments ou utiliser la valeur par d√©faut
const ngrokUrl = process.argv[2] || 'https://apt-buzzard-leading.ngrok-free.app';

if (!ngrokUrl.startsWith('http')) {
    console.error('‚ùå URL NGROK invalide. Utilisez: node configure-webhooks.js [ngrok-url]');
    console.log('Exemple: node configure-webhooks.js https://apt-buzzard-leading.ngrok-free.app');
    process.exit(1);
}

configureWebhooks(ngrokUrl); 